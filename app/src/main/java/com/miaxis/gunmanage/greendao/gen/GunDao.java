package com.miaxis.gunmanage.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.gunmanage.bean.Gun;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GUN".
*/
public class GunDao extends AbstractDao<Gun, Long> {

    public static final String TABLENAME = "GUN";

    /**
     * Properties of entity Gun.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Rfid = new Property(2, String.class, "rfid", false, "RFID");
        public final static Property OpDate = new Property(3, String.class, "opDate", false, "OP_DATE");
        public final static Property OpUserName = new Property(4, String.class, "opUserName", false, "OP_USER_NAME");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property StatusName = new Property(6, String.class, "statusName", false, "STATUS_NAME");
        public final static Property CompCode = new Property(7, String.class, "compCode", false, "COMP_CODE");
        public final static Property CompNo = new Property(8, String.class, "compNo", false, "COMP_NO");
        public final static Property ComId = new Property(9, String.class, "comId", false, "COM_ID");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
    }


    public GunDao(DaoConfig config) {
        super(config);
    }
    
    public GunDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GUN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"RFID\" TEXT," + // 2: rfid
                "\"OP_DATE\" TEXT," + // 3: opDate
                "\"OP_USER_NAME\" TEXT," + // 4: opUserName
                "\"STATUS\" TEXT," + // 5: status
                "\"STATUS_NAME\" TEXT," + // 6: statusName
                "\"COMP_CODE\" TEXT," + // 7: compCode
                "\"COMP_NO\" TEXT," + // 8: compNo
                "\"COM_ID\" TEXT," + // 9: comId
                "\"TYPE\" TEXT);"); // 10: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GUN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Gun entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(3, rfid);
        }
 
        String opDate = entity.getOpDate();
        if (opDate != null) {
            stmt.bindString(4, opDate);
        }
 
        String opUserName = entity.getOpUserName();
        if (opUserName != null) {
            stmt.bindString(5, opUserName);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(7, statusName);
        }
 
        String compCode = entity.getCompCode();
        if (compCode != null) {
            stmt.bindString(8, compCode);
        }
 
        String compNo = entity.getCompNo();
        if (compNo != null) {
            stmt.bindString(9, compNo);
        }
 
        String comId = entity.getComId();
        if (comId != null) {
            stmt.bindString(10, comId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Gun entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(3, rfid);
        }
 
        String opDate = entity.getOpDate();
        if (opDate != null) {
            stmt.bindString(4, opDate);
        }
 
        String opUserName = entity.getOpUserName();
        if (opUserName != null) {
            stmt.bindString(5, opUserName);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String statusName = entity.getStatusName();
        if (statusName != null) {
            stmt.bindString(7, statusName);
        }
 
        String compCode = entity.getCompCode();
        if (compCode != null) {
            stmt.bindString(8, compCode);
        }
 
        String compNo = entity.getCompNo();
        if (compNo != null) {
            stmt.bindString(9, compNo);
        }
 
        String comId = entity.getComId();
        if (comId != null) {
            stmt.bindString(10, comId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Gun readEntity(Cursor cursor, int offset) {
        Gun entity = new Gun( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rfid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // opDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // opUserName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // statusName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // compCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // compNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Gun entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRfid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatusName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCompNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Gun entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Gun entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Gun entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
